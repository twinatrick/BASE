package com.example.demo;


import java.util.Arrays;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoggingAspect {

    // 定义切点，指定在哪些方法上执行通知
    @Pointcut("execution(* com.example.controller.*.*(..))")
    public void controllerMethods() {}

    // 在方法执行前执行通知
    @Before("controllerMethods()")
    public void beforeMethod(JoinPoint joinPoint) {
        // 在方法执行前的逻辑
        System.out.println("Before method: " + joinPoint.getSignature().getName());
    }

    // 在方法执行后执行通知
    @AfterReturning(pointcut = "controllerMethods()", returning = "result")
    public void afterReturningMethod(JoinPoint joinPoint, Object result) {
        // 在方法执行后的逻辑
        System.out.println("After returning method: " + joinPoint.getSignature().getName());
    }

    // 在方法抛出异常时执行通知
    @AfterThrowing(pointcut = "controllerMethods()", throwing = "ex")
    public void afterThrowingMethod(JoinPoint joinPoint, Exception ex) {
        // 在方法抛出异常时的逻辑
        System.out.println("After throwing method: " + joinPoint.getSignature().getName() + ", Exception: " + ex.getMessage());
    }
}
