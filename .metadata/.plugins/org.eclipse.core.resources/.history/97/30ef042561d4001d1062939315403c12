package com.example.demo;


import java.util.Arrays;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Aspect
@Component
public class LoginAspect {

    @Autowired
    private HttpSession httpSession;

    // 定义切入点，这里以所有带有 @PostMapping("/login") 注解的方法为例
    @Pointcut("@annotation(org.springframework.web.bind.annotation.PostMapping) && @annotation(login)")
    public void loginPointcut(Login login) {
    }

    // 在切入点方法执行前拦截
    @Before("loginPointcut(login)")
    public void beforeLogin(JoinPoint joinPoint, Login login) {
        // 在这里添加你的拦截逻辑，例如日志记录、权限校验等
        System.out.println("Before login");
    }

    // 在切入点方法执行后拦截
    @After("loginPointcut(login)")
    public void afterLogin(JoinPoint joinPoint, Login login) {
        // 在这里添加你的拦截逻辑，例如日志记录、权限校验等
        System.out.println("After login");
    }

    // 在切入点方法抛出异常时拦截
    @AfterThrowing(value = "loginPointcut(login)", throwing = "ex")
    public void afterThrowingLogin(JoinPoint joinPoint, Login login, Throwable ex) {
        // 在这里添加你的拦截逻辑，例如异常处理、错误页面跳转等
        System.out.println("After throwing login");
    }
}
